require("dotenv").config();
const mongoose = require("mongoose");
const Make = require("./model/Make");
const Model = require("./model/Model");

const popularCarModels = [
  {
    makeName: "Toyota",
    models: [
      "Corolla",
      "Camry",
      "Prius",
      "RAV4",
      "Highlander",
      "Tacoma",
      "4Runner",
      "Avalon",
      "Sienna",
      "Sequoia",
    ],
  },
  {
    makeName: "Volkswagen",
    models: [
      "Golf",
      "Passat",
      "Tiguan",
      "Jetta",
      "Polo",
      "Arteon",
      "Touareg",
      "Atlas",
      "Beetle",
      "ID.4",
    ],
  },
  {
    makeName: "Ford",
    models: [
      "F-150",
      "Mustang",
      "Escape",
      "Explorer",
      "Edge",
      "Fusion",
      "Ranger",
      "Expedition",
      "Bronco",
      "EcoSport",
    ],
  },
  {
    makeName: "Chevrolet",
    models: [
      "Silverado",
      "Equinox",
      "Malibu",
      "Tahoe",
      "Traverse",
      "Colorado",
      "Camaro",
      "Blazer",
      "Suburban",
      "Impala",
    ],
  },
  {
    makeName: "Honda",
    models: [
      "Civic",
      "Accord",
      "CR-V",
      "Pilot",
      "Fit",
      "Odyssey",
      "HR-V",
      "Ridgeline",
      "Passport",
      "Insight",
    ],
  },
  {
    makeName: "Nissan",
    models: [
      "Altima",
      "Rogue",
      "Sentra",
      "Pathfinder",
      "Murano",
      "Frontier",
      "Versa",
      "Maxima",
      "Armada",
      "Leaf",
    ],
  },
  {
    makeName: "Hyundai",
    models: [
      "Elantra",
      "Sonata",
      "Tucson",
      "Santa Fe",
      "Palisade",
      "Kona",
      "Venue",
      "Veloster",
      "Ioniq",
      "Accent",
    ],
  },
  {
    makeName: "Subaru",
    models: [
      "Outback",
      "Forester",
      "Impreza",
      "Crosstrek",
      "Ascent",
      "WRX",
      "Legacy",
      "BRZ",
      "XV",
      "Tribeca",
    ],
  },
  {
    makeName: "Mercedes-Benz",
    models: [
      "C-Class",
      "E-Class",
      "GLC",
      "GLE",
      "S-Class",
      "A-Class",
      "GLA",
      "GLB",
      "CLS",
      "AMG GT",
    ],
  },
  {
    makeName: "BMW",
    models: [
      "3 Series",
      "5 Series",
      "X5",
      "X3",
      "7 Series",
      "X7",
      "2 Series",
      "4 Series",
      "X1",
      "8 Series",
    ],
  },
  {
    makeName: "Audi",
    models: ["A4", "Q5", "A6", "A3", "Q7", "A5", "Q3", "A7", "Q8", "TT"],
  },
  {
    makeName: "Lexus",
    models: ["RX", "ES", "NX", "GX", "IS", "LS", "LX", "RC", "UX", "CT"],
  },
  {
    makeName: "Porsche",
    models: [
      "911",
      "Cayenne",
      "Macan",
      "Panamera",
      "Taycan",
      "Boxster",
      "Cayman",
      "718",
      "Carrera",
      "Turbo",
    ],
  },
  {
    makeName: "Jeep",
    models: [
      "Wrangler",
      "Grand Cherokee",
      "Cherokee",
      "Compass",
      "Renegade",
      "Gladiator",
      "Patriot",
      "Commander",
      "Liberty",
      "Wagoneer",
    ],
  },
  {
    makeName: "Dodge",
    models: [
      "Charger",
      "Challenger",
      "Durango",
      "Journey",
      "Grand Caravan",
      "Avenger",
      "Dart",
      "Magnum",
      "Viper",
      "Nitro",
    ],
  },
  {
    makeName: "Ram",
    models: [
      "1500",
      "2500",
      "3500",
      "ProMaster",
      "ProMaster City",
      "Dakota",
      "C/V Tradesman",
    ],
  },
  {
    makeName: "GMC",
    models: [
      "Sierra",
      "Acadia",
      "Terrain",
      "Yukon",
      "Canyon",
      "Savanna",
      "Jimmy",
      "Envoy",
    ],
  },
  {
    makeName: "Tesla",
    models: ["Model 3", "Model S", "Model X", "Model Y", "Roadster"],
  },
  {
    makeName: "Volvo",
    models: [
      "XC90",
      "XC60",
      "S60",
      "S90",
      "V60",
      "V90",
      "XC40",
      "C40",
      "V40",
      "S40",
    ],
  },
  {
    makeName: "Mazda",
    models: [
      "Mazda3",
      "Mazda6",
      "CX-5",
      "CX-3",
      "CX-9",
      "MX-5 Miata",
      "CX-30",
      "Mazda2",
      "RX-8",
      "Mazda5",
    ],
  },
  {
    makeName: "Kia",
    models: [
      "Soul",
      "Sportage",
      "Sorento",
      "Optima",
      "Forte",
      "Telluride",
      "Stinger",
      "Niro",
      "Seltos",
      "Rio",
    ],
  },
  {
    makeName: "Land Rover",
    models: [
      "Range Rover",
      "Discovery",
      "Defender",
      "Range Rover Sport",
      "Range Rover Velar",
      "Range Rover Evoque",
      "Freelander",
    ],
  },
  {
    makeName: "Jaguar",
    models: [
      "XF",
      "F-PACE",
      "XE",
      "XJ",
      "E-PACE",
      "F-TYPE",
      "I-PACE",
      "XK",
      "X-Type",
      "S-Type",
    ],
  },
  {
    makeName: "Mitsubishi",
    models: [
      "Outlander",
      "Eclipse Cross",
      "Mirage",
      "Lancer",
      "Pajero",
      "ASX",
      "Outlander Sport",
      "Galant",
      "Triton",
      "Montero",
    ],
  },
  {
    makeName: "Acura",
    models: [
      "MDX",
      "RDX",
      "TLX",
      "ILX",
      "NSX",
      "RLX",
      "ZDX",
      "TSX",
      "Integra",
      "RSX",
    ],
  },
  {
    makeName: "Infiniti",
    models: [
      "Q50",
      "QX60",
      "QX80",
      "QX50",
      "QX70",
      "Q60",
      "QX30",
      "QX70",
      "M37",
      "G37",
    ],
  },
  {
    makeName: "Cadillac",
    models: [
      "Escalade",
      "XT5",
      "CTS",
      "XT4",
      "XT6",
      "XTS",
      "CT6",
      "SRX",
      "ATS",
      "CT5",
    ],
  },
  {
    makeName: "Buick",
    models: [
      "Encore",
      "Enclave",
      "LaCrosse",
      "Regal",
      "Envision",
      "Verano",
      "Cascada",
      "Lucerne",
      "Rendezvous",
      "Rainier",
    ],
  },
  {
    makeName: "Chrysler",
    models: [
      "300",
      "Pacifica",
      "Voyager",
      "200",
      "Aspen",
      "Sebring",
      "Crossfire",
      "PT Cruiser",
      "Pacifica Hybrid",
      "Concorde",
    ],
  },
  {
    makeName: "Lincoln",
    models: [
      "Navigator",
      "MKC",
      "Continental",
      "MKZ",
      "Aviator",
      "Corsair",
      "Nautilus",
      "Town Car",
      "MKT",
      "Mark LT",
    ],
  },
];

mongoose
  .connect(process.env.MONGODB_URL, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(async () => {
    console.log("Connected to the database");

    for (let item of popularCarModels) {
      const make = await Make.findOne({ name: item.makeName });
      if (!make) continue;

      for (let modelName of item.models) {
        const model = new Model({ name: modelName, make: make._id });
        await model.save();
      }
    }

    console.log("Models added");
  })
  .catch((error) => console.log(error))
  .finally(() => mongoose.connection.close());
